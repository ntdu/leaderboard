# Generated by Django 5.1.4 on 2024-12-26 05:23

import django.core.validators
import django.utils.timezone
import user.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_name', models.CharField(error_messages={'unique': 'A user with that user_name already exists.'}, help_text='Required.', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='user_name')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email address already exists.'}, help_text='Required.', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='email address')),
                ('has_strong_password', models.BooleanField(default=False, help_text='Designates whether this user instance has a strong password or not', verbose_name='has_strong_password')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', user.models.CustomUserManager()),
            ],
        ),
    ]
